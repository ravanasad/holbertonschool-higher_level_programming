The ``7-base_geometry`` module
=============================
Testing ``BaseGeometry`` class
-----------------------------

>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
>>> bg = BaseGeometry()
>>> type(bg)
<class '7-base_geometry.BaseGeometry'>
>>> isinstance(bg, BaseGeometry)
True
>>> issubclass(type(bg), BaseGeometry)
True
>>> bg.area()
Traceback (most recent call last):
...
Exception: area() is not implemented
>>> bg.integer_validator("my_int", 12)
>>> bg.integer_validator("my_str", "Hello")
Traceback (most recent call last):
...
TypeError: my_str must be an integer
>>> bg.integer_validator("zero", 0)
Traceback (most recent call last):
...
ValueError: zero must be greater than 0
>>> bg.integer_validator("neg_int", -7)
Traceback (most recent call last):
...
ValueError: neg_int must be greater than 0
>>> bg.integer_validator("my_int")
Traceback (most recent call last):
...
TypeError: integer_validator() missing 1 required positional argument: 'value'
>>> bg.integer_validator()
Traceback (most recent call last):
...
TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'
>>> print(bg.integer_validator("width", 89))
None
>>> bg.integer_validator("bool", True)
Traceback (most recent call last):
...
TypeError: bool must be an integer
>>> bg.integer_validator("tup", (1,))
Traceback (most recent call last):
...
TypeError: tup must be an integer
>>> bg.integer_validator("list", [1, 2, 3, 4])
Traceback (most recent call last):
...
TypeError: list must be an integer
>>> bg.integer_validator("set", {9, 4, 7} )
Traceback (most recent call last):
...
TypeError: set must be an integer
>>> bg.integer_validator("Nop", None)
Traceback (most recent call last):
...
TypeError: Nop must be an integer